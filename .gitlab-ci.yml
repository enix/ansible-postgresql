variables:
  GITHUB_REPO: $CI_PROJECT_NAME
  GITHUB_GROUP: enix
  ANSIBLE_INVENTORY: "tests/inventory"
  PYTHONUNBUFFERED: "1"
  ANSIBLE_FORCE_COLOR: "1"
  PY_COLORS: '1'

.ansible_test_template: &ansible_test
  script:
    - ansible --version
# Run linters. Does not fail if no errors reported
    - ansible-lint --force-color . || true
    - yamllint -f colored . || true
# Uncomment if your role have depends
#    - ansible-galaxy install -v -r requirements.yml
    - ansible-playbook tests/test.yml --syntax-check
    - ansible-playbook -vvv --connection=local tests/test.yml
    # - idempotence=$(mktemp)
    # - ansible-playbook -vvv --connection=local tests/test.yml | tee ${idempotence}
    # - >
    #   tail ${idempotence}
    #   | grep -q 'changed=0.*failed=0'
    #   && (echo 'Idempotence test: pass' && exit 0)
    #   || (echo 'Idempotence test: fail' && exit 1)
# This part is used to check role run.
# Add your own tests depending on your $ROLE
    # - echo "=======> Starting output tests"

# We build using (ansiblecheck)[https://hub.docker.com/r/ansiblecheck/ansiblecheck/]
# images It provide a wide variety of OS container images to test with.
# most frequent ones included here

# debian-stretch:
#   image: ansiblecheck/ansiblecheck:debian-stretch
#   <<: *ansible_test

# debian-buster:
#   image: registry.gitlab.com/lcaflc/ansiblecheck:debian-buster
#   <<: *ansible_test

# debian-bullseye:
#   image: registry.gitlab.com/lcaflc/ansiblecheck:debian-bullseye
#   <<: *ansible_test

# ubuntu-focal:
#   image: registry.gitlab.com/lcaflc/ansiblecheck:ubuntu-focal
#   <<: *ansible_test

# ubuntu-jammy:
#   image: registry.gitlab.com/lcaflc/ansiblecheck:ubuntu-jammy
#   <<: *ansible_test

test:
  services:
    - docker:dind
  variables:
      DOCKER_BUILDKIT: 1
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_CERTDIR: "/certs"
      DOCKER_TLS_VERIFY: 1
      DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
      DOCKER_DRIVER: overlay2

  image: docker:stable-dind
  before_script:
    - apk add --no-cache
      python3 python3-dev py3-pip gcc git curl build-base
      autoconf automake py3-cryptography linux-headers
      musl-dev libffi-dev openssl-dev openssh rsync
    - docker info
    - python3 --version
    - python3 -m pip install ansible molecule[docker]
    - ansible --version
    - molecule --version  

  script:
    # - molecule test
    - molecule converge
  tags:
    - docker-dind

importgalaxy:
  stage: deploy
  image: registry.gitlab.com/lcaflc/ansiblecheck:debian-bullseye
  only: 
    - main
    - master
    - tags
#  when: on_success
  before_script:
    - ansible --version
  script:
    - ansible-galaxy role import ${GITHUB_GROUP} ${GITHUB_REPO} --token ${GALAXY_API_TOKEN}
